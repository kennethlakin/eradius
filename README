This is an alpha quality RADIUS/EAP server.

It currently supports EAP-MD5, EAP-MSCHAPv2, and PEAPv0/1-MSCHAPv2.

It shares no code with and is related only in function to the travelping/jungerl
project of the same name.

It has been tested with eapol_test, OS X 10.10.5, and a couple of Android devices.
It currently fails to work with Windows 7 supplicants.

Getting started:
* Install rebar3 and put it on your PATH.
* Copy app.config.example to app.config
  * The contents of the eradius ssl_opts list are passed to ssl:ssl_accept/2. Modify
    the list as required to point to your SSL certificates and include any password
    required to unlock them.
* Run make (or rebar3 compile) to fetch deps and build the project.
* Run "make start" to start the server. Run "make watch" to start the server
  as well as rustyio's sync auto-recompiler.

Dependencies:
* Erlang 18 or later
* lager
* lager_syslog
* sync
rebar3 handles dependency fetching and compilation.

Known issues:
* The project contains a copy of ssl_record.erl from OTP 18.3. The BEAST 
  mitigation added to OTP in commits f1f1d43 and fc668fb freaks out all
  TLS 1.0 supplicants I've tested with. With the BEAST mitigation disabled,
  Android, eapol_test, and Windows 7 supplicants work correctly. The copy of 
  ssl_record.erl will be removed when a toggle for the BEAST mitigations
  makes it to upstream. See also:
  http://erlang.org/pipermail/erlang-questions/2012-August/068622.html
* The project contains modified versions of ssl_connection.erl
  and ssl_handshake.erl from OTP 18.3. The TLS 1.1 and 1.2 PRF code was
  assuming that the negotiated PRF would always be SHA256. This is not
  true in either case. Those files (as well as the various supporting files)
  will be removed as soon as a fix for the issue makes it upstream.
* Loglevels are somewhat inappropriate.
* Too little validation is done on incoming data.
* Listen port, user credentials, and NAS secret are hard-coded.
* RADIUS packet handler crashes rather than sending an Access-Reject if sent
  a non-EAP packet.
* MSCHAPv2 authentication failure terminates the EAP conversation rather than
  presenting the option of retrying authentication.
* Very little validation is performed on PEAP packets. No validation is
  performed on TLS payloads in PEAP packets.
* TLS messages transmited by the NAS that are split across multiple RADIUS
  packets will not be handled correctly. The PEAP handling code needs to
  check for this condition and accumulate the complete TLS packet before
  sending it off to the TLS handler.
* Windows 7's PEAP and MSCHAPv2 quirks are not yet handled.

License:
All code in the project is released under the terms of the GPLv2 or later.
